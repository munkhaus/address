// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_application_9/test/map_feature/application/map_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:math' as _i5;
import 'dart:ui' as _i9;

import 'package:flutter/material.dart' as _i13;
import 'package:flutter_map/src/geo/latlng_bounds.dart' as _i11;
import 'package:flutter_map/src/gestures/map_events.dart' as _i8;
import 'package:flutter_map/src/map/camera/camera.dart' as _i2;
import 'package:flutter_map/src/map/camera/camera_fit.dart' as _i10;
import 'package:flutter_map/src/map/controller/map_controller.dart' as _i6;
import 'package:flutter_map/src/misc/center_zoom.dart' as _i4;
import 'package:flutter_map/src/misc/fit_bounds_options.dart' as _i12;
import 'package:latlong2/latlong.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMapCamera_0 extends _i1.SmartFake implements _i2.MapCamera {
  _FakeMapCamera_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLatLng_1 extends _i1.SmartFake implements _i3.LatLng {
  _FakeLatLng_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCenterZoom_2 extends _i1.SmartFake implements _i4.CenterZoom {
  _FakeCenterZoom_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePoint_3<T extends num> extends _i1.SmartFake
    implements _i5.Point<T> {
  _FakePoint_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MapController].
///
/// See the documentation for Mockito's code generation for more information.
class MockMapController extends _i1.Mock implements _i6.MapController {
  MockMapController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Stream<_i8.MapEvent> get mapEventStream =>
      (super.noSuchMethod(
            Invocation.getter(#mapEventStream),
            returnValue: _i7.Stream<_i8.MapEvent>.empty(),
          )
          as _i7.Stream<_i8.MapEvent>);

  @override
  _i2.MapCamera get camera =>
      (super.noSuchMethod(
            Invocation.getter(#camera),
            returnValue: _FakeMapCamera_0(this, Invocation.getter(#camera)),
          )
          as _i2.MapCamera);

  @override
  _i3.LatLng get center =>
      (super.noSuchMethod(
            Invocation.getter(#center),
            returnValue: _FakeLatLng_1(this, Invocation.getter(#center)),
          )
          as _i3.LatLng);

  @override
  double get zoom =>
      (super.noSuchMethod(Invocation.getter(#zoom), returnValue: 0.0)
          as double);

  @override
  double get rotation =>
      (super.noSuchMethod(Invocation.getter(#rotation), returnValue: 0.0)
          as double);

  @override
  bool move(
    _i3.LatLng? center,
    double? zoom, {
    _i9.Offset? offset = _i9.Offset.zero,
    String? id,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #move,
              [center, zoom],
              {#offset: offset, #id: id},
            ),
            returnValue: false,
          )
          as bool);

  @override
  bool rotate(double? degree, {String? id}) =>
      (super.noSuchMethod(
            Invocation.method(#rotate, [degree], {#id: id}),
            returnValue: false,
          )
          as bool);

  @override
  ({bool moveSuccess, bool rotateSuccess}) rotateAroundPoint(
    double? degree, {
    _i5.Point<double>? point,
    _i9.Offset? offset,
    String? id,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #rotateAroundPoint,
              [degree],
              {#point: point, #offset: offset, #id: id},
            ),
            returnValue: (moveSuccess: false, rotateSuccess: false),
          )
          as ({bool moveSuccess, bool rotateSuccess}));

  @override
  ({bool moveSuccess, bool rotateSuccess}) moveAndRotate(
    _i3.LatLng? center,
    double? zoom,
    double? degree, {
    String? id,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #moveAndRotate,
              [center, zoom, degree],
              {#id: id},
            ),
            returnValue: (moveSuccess: false, rotateSuccess: false),
          )
          as ({bool moveSuccess, bool rotateSuccess}));

  @override
  bool fitCamera(_i10.CameraFit? cameraFit) =>
      (super.noSuchMethod(
            Invocation.method(#fitCamera, [cameraFit]),
            returnValue: false,
          )
          as bool);

  @override
  bool fitBounds(
    _i11.LatLngBounds? bounds, {
    _i12.FitBoundsOptions? options = const _i12.FitBoundsOptions(
      padding: _i13.EdgeInsets.all(12.0),
    ),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fitBounds, [bounds], {#options: options}),
            returnValue: false,
          )
          as bool);

  @override
  _i4.CenterZoom centerZoomFitBounds(
    _i11.LatLngBounds? bounds, {
    _i12.FitBoundsOptions? options = const _i12.FitBoundsOptions(
      padding: _i13.EdgeInsets.all(12.0),
    ),
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #centerZoomFitBounds,
              [bounds],
              {#options: options},
            ),
            returnValue: _FakeCenterZoom_2(
              this,
              Invocation.method(
                #centerZoomFitBounds,
                [bounds],
                {#options: options},
              ),
            ),
          )
          as _i4.CenterZoom);

  @override
  _i3.LatLng pointToLatLng(_i5.Point<num>? screenPoint) =>
      (super.noSuchMethod(
            Invocation.method(#pointToLatLng, [screenPoint]),
            returnValue: _FakeLatLng_1(
              this,
              Invocation.method(#pointToLatLng, [screenPoint]),
            ),
          )
          as _i3.LatLng);

  @override
  _i5.Point<double> latLngToScreenPoint(_i3.LatLng? mapCoordinate) =>
      (super.noSuchMethod(
            Invocation.method(#latLngToScreenPoint, [mapCoordinate]),
            returnValue: _FakePoint_3<double>(
              this,
              Invocation.method(#latLngToScreenPoint, [mapCoordinate]),
            ),
          )
          as _i5.Point<double>);

  @override
  _i5.Point<double> rotatePoint(
    _i5.Point<num>? mapCenter,
    _i5.Point<num>? point, {
    bool? counterRotation = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #rotatePoint,
              [mapCenter, point],
              {#counterRotation: counterRotation},
            ),
            returnValue: _FakePoint_3<double>(
              this,
              Invocation.method(
                #rotatePoint,
                [mapCenter, point],
                {#counterRotation: counterRotation},
              ),
            ),
          )
          as _i5.Point<double>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
